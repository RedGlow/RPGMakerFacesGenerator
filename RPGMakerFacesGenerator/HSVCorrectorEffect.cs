//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;


namespace RPGMakerFacesGenerator {
	
	public class HSVCorrectorEffect : ShaderEffect {
		public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(HSVCorrectorEffect), 0);
		public static readonly DependencyProperty HueShiftProperty = DependencyProperty.Register("HueShift", typeof(double), typeof(HSVCorrectorEffect), new UIPropertyMetadata(((double)(0D)), PixelShaderConstantCallback(0)));
		public static readonly DependencyProperty SaturationFactorProperty = DependencyProperty.Register("SaturationFactor", typeof(double), typeof(HSVCorrectorEffect), new UIPropertyMetadata(((double)(1D)), PixelShaderConstantCallback(1)));
		public static readonly DependencyProperty ValueFactorProperty = DependencyProperty.Register("ValueFactor", typeof(double), typeof(HSVCorrectorEffect), new UIPropertyMetadata(((double)(1D)), PixelShaderConstantCallback(2)));
		public HSVCorrectorEffect() {
			PixelShader pixelShader = new PixelShader();
			pixelShader.UriSource = new Uri("/RPGMakerFacesGenerator;component/HSVCorrectorEffect.ps", UriKind.Relative);
			this.PixelShader = pixelShader;

			this.UpdateShaderValue(InputProperty);
			this.UpdateShaderValue(HueShiftProperty);
			this.UpdateShaderValue(SaturationFactorProperty);
			this.UpdateShaderValue(ValueFactorProperty);
		}
		public Brush Input {
			get {
				return ((Brush)(this.GetValue(InputProperty)));
			}
			set {
				this.SetValue(InputProperty, value);
			}
		}
		/// <summary>Shift in Hue.</summary>
		public double HueShift {
			get {
				return ((double)(this.GetValue(HueShiftProperty)));
			}
			set {
				this.SetValue(HueShiftProperty, value);
			}
		}
		/// <summary>Multiplication factor in Saturation.</summary>
		public double SaturationFactor {
			get {
				return ((double)(this.GetValue(SaturationFactorProperty)));
			}
			set {
				this.SetValue(SaturationFactorProperty, value);
			}
		}
		/// <summary>Multiplication factor in Value.</summary>
		public double ValueFactor {
			get {
				return ((double)(this.GetValue(ValueFactorProperty)));
			}
			set {
				this.SetValue(ValueFactorProperty, value);
			}
		}
	}
}
